############################# PROJET ADD -- Léo GABET ###################################
############################### Charger les différentes librairies ######################################
library(installr)
library(lmtest)
library(tidyverse)
library(data.table)
library(magrittr)
library(DAAG)
library(plotly)
library(tseries)
library(olsrr)
library(car)
library(readr)
library(readxl)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(openxlsx)
library(Factoshiny)
don <- read_csv("C:/Users/33662/Documents/UFR/MASTER_SEP/Semestre_3/SEP0931#Analyse_des_données_data_mining/PROJET/accidentsVelo.csv")
# On visualise nos données :
View(don)
summary(don)
don <- read_csv("C:/Users/33662/Documents/UFR/MASTER_SEP/Semestre_3/SEP0931#Analyse_des_données_data_mining/PROJET/accidentsVelo.csv")
# On visualise nos données :
View(don)
# On visualise nos données :
View(don)
# On visualise nos données :
View(don)
# On visualise nos données :
View(don)
don <- read_csv("C:/Users/33662/bureau/data/accidentsVelo.csv")
library(readr)
don <- read_csv("C:/Users/33662/bureau/data/accidentsVelo.csv")
don <- read_csv("C:/Users/33662/desktop/bureau/data/accidentsVelo.csv")
don <- read_csv("C:/Users/33662/deskop/add_velo/data/accidentsVelo.csv")
don <- read_csv("C:/Users/33662/desktop/add_velo/data/accidentsVelo.csv")
############################# PROJET ADD -- Léo GABET ###################################
############################### Charger les différentes librairies ######################################
library(installr)
library(lmtest)
library(tidyverse)
library(data.table)
library(magrittr)
library(DAAG)
library(plotly)
library(tseries)
library(olsrr)
library(car)
library(readr)
library(readxl)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(openxlsx)
library(Factoshiny)
don <- read_csv("C:/Users/33662/desktop/add_velo/data/accidentsVelo.csv")
# On visualise nos données :
View(don)
don <- read_csv("C:/Users/33662/desktop/add_velo/data/accidentsVelo.csv", sep=";")
don <- read_csv("C:/Users/33662/desktop/add_velo/data/accidentsVelo.csv", delim=";")
don <- read_delim("C:/Users/33662/desktop/add_velo/data/accidentsVelo.csv", delim=";")
# On visualise nos données :
View(don)
summary(don&sexe)
summary(don&sex)
summary(don&sexe)
summary(don$sexe)
Genre : don$sexe
Genre = don$sexe
str(genre)
genre = don$sexe
str(genre)
type(genre)
table(genre)
# Fonction pour changer les valeurs quanti en quali sur le genre
genre_V2 <- function(valeur) {
if (valeur == 1) {
return("Homme")
} else if (valeur == 2) {
return("Femme")
} else {
return("Valeur inconnue")
}
}
# Appliquer la fonction à la colonne
genre <- sapply(genre, genre_V2)
summary (genre)
table (genre)
# On visualise nos données :
View(don)
# Sélectionner la feuille de calcul (remplacez "NomFeuille" par le nom de votre feuille)
don_modif <- getSheet(don, sheet = "Data_quali")
library(openxlsx)
# Sélectionner la feuille de calcul (remplacez "NomFeuille" par le nom de votre feuille)
don_modif <- getSheet(don, sheet = "Data_quali")
don <- read_delim("C:/Users/33662/desktop/add_velo/data/accidentsVelo.csv", delim=";")
genre = don$sexe
table(genre)
# Fonction pour changer les valeurs quanti en quali sur le genre
genre_V2 <- function(valeur) {
if (valeur == 1) {
return("Homme")
} else if (valeur == 2) {
return("Femme")
} else {
return("Valeur inconnue")
}
}
# Appliquer la fonction à la colonne
genre_quanti <- sapply(genre, genre_V2)
table (genre)
genre = genre_quanti
don <- read_delim("C:/Users/33662/desktop/add_velo/data/accidentsVelo.csv", delim=";")
genre = don$sexe
table(genre)
# Fonction pour changer les valeurs quanti en quali sur le genre
genre_V2 <- function(valeur) {
if (valeur == 1) {
return("Homme")
} else if (valeur == 2) {
return("Femme")
} else {
return("Valeur inconnue")
}
}
# Appliquer la fonction à la colonne
genre_quanti <- sapply(genre, genre_V2)
table (genre_quanti)
genre = genre_quanti
# On visualise nos données :
View(don)
table (genre_quanti)
genre_quanti
don$sexe = genre_quanti
don$sexe
# On visualise nos données :
View(don)
############################# PROJET ADD -- Léo GABET ###################################
############################### Charger les différentes librairies ######################################
library(installr)
library(lmtest)
library(tidyverse)
library(data.table)
library(magrittr)
library(DAAG)
library(plotly)
library(tseries)
library(olsrr)
library(car)
library(readr)
library(readxl)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(openxlsx)
library(Factoshiny)
don <- read_delim("C:/Users/33662/desktop/add_velo/data/accidentsVelo.csv", delim=";")
# On visualise nos données :
View(don)
# Visualiser les premières lignes du dataframe avec la correspondance pour la colonne "Int"
don %>%
mutate(int = case_when(
Int == 0 ~ "Non renseigné",
Int == 1 ~ "Hors intersection",
Int == 2 ~ "Intersection en X",
Int == 3 ~ "Intersection en T",
Int == 4 ~ "Intersection en Y",
Int == 5 ~ "Intersection à plus de 4 branches",
Int == 6 ~ "Giratoire",
Int == 7 ~ "Place",
Int == 8 ~ "Passage à niveau",
Int == 9 ~ "Autre intersection",
TRUE ~ "Valeur inconnue"
)) %>%
select(Type_Intersection, everything()) %>%
head()
# Visualiser les premières lignes du dataframe avec la correspondance pour la colonne "Int"
don %>%
mutate(don$int = case_when(
# Visualiser les premières lignes du dataframe avec la correspondance pour la colonne "Int"
don %>%
mutate(don$int == case_when(
Int == 0 ~ "Non renseigné",
Int == 1 ~ "Hors intersection",
Int == 2 ~ "Intersection en X",
Int == 3 ~ "Intersection en T",
Int == 4 ~ "Intersection en Y",
Int == 5 ~ "Intersection à plus de 4 branches",
Int == 6 ~ "Giratoire",
Int == 7 ~ "Place",
Int == 8 ~ "Passage à niveau",
Int == 9 ~ "Autre intersection",
TRUE ~ "Valeur inconnue"
)) %>%
select(Type_Intersection, everything()) %>%
head()
# Visualiser les premières lignes du dataframe avec la correspondance pour la colonne "Int"
don %>%
mutate(don$int = case_when(
type_intersection <- function(valeur) {
case_when(
valeur == 0 ~ "Non renseigné",
valeur == 1 ~ "Hors intersection",
valeur == 2 ~ "Intersection en X",
valeur == 3 ~ "Intersection en T",
valeur == 4 ~ "Intersection en Y",
valeur == 5 ~ "Intersection à plus de 4 branches",
valeur == 6 ~ "Giratoire",
valeur == 7 ~ "Place",
valeur == 8 ~ "Passage à niveau",
valeur == 9 ~ "Autre intersection",
TRUE ~ "Valeur inconnue"
)
}
table(don$int)
int_quanti <- sapply(don$int, type_intersection)
table(int_quanti)
don$int = int_quanti
# On visualise nos données :
View(don)
for (i in 1:10) {
cat("Itération :", i, "\n")
Sys.sleep(1)
}
convert_quali <- function(valeur, mapping) {
return(case_when(
valeur %in% names(mapping) ~ mapping[[as.character(valeur)]],
TRUE ~ "Valeur inconnue"
))
}
# Type de collision
don$col <- convert_quali(don$col, list(
"1" = "Deux véhicules - frontale",
"2" = "Deux véhicules - par l'arrière",
"3" = "Deux véhicules - par le côté",
"4" = "Trois véhicules et plus - en chaîne",
"5" = "Trois véhicules et plus - collisions multiples",
"6" = "Autre collision",
"7" = "Sans collision"
))
names(don)[names(don$sexe) == "sexe"] <- "Genre"
# On visualise nos données :
View(don)
names(don)[names(don) == "sexe"] <- "Genre"
# On visualise nos données :
View(don)
# Fonction pour changer les valeurs quanti en quali sur le genre
Genre <- function(valeur) {
if (valeur == 1) {
return("Homme")
} else if (valeur == 2) {
return("Femme")
} else {
return("Valeur inconnue")
}
}
# Appliquer la fonction à la colonne
genre_quali <- sapply(genre, Genre)
table (genre_quali)
don$sexe = genre_quali
don <- read_delim("C:/Users/33662/desktop/add_velo/data/accidentsVelo.csv", delim=";")
# Fonction pour changer les valeurs quanti en quali sur le genre
Genre <- function(valeur) {
if (valeur == 1) {
return("Homme")
} else if (valeur == 2) {
return("Femme")
} else {
return("Valeur inconnue")
}
}
# Appliquer la fonction à la colonne
genre_quali <- sapply(don$sexe, Genre)
table (genre_quali)
don$sexe = genre_quali
names(don)[names(don) == "sexe"] <- "Genre"
# On visualise nos données :
View(don)
convert_quali <- function(valeur, mapping) {
return(case_when(
valeur %in% names(mapping) ~ mapping[[as.character(valeur)]],
TRUE ~ "Valeur inconnue"
))
}
# Type de collision
don$col <- convert_quali(don$col, list(
"1" = "Deux véhicules - frontale",
"2" = "Deux véhicules - par l'arrière",
"3" = "Deux véhicules - par le côté",
"4" = "Trois véhicules et plus - en chaîne",
"5" = "Trois véhicules et plus - collisions multiples",
"6" = "Autre collision",
"7" = "Sans collision"
))
table(don$col)
col_quali <- sapply(don$col, type_collision)
type_collision <- function(valeur) {
case_when(
valeur == 1 ~ "Deux véhicules - frontale",
valeur == 2 ~ "Deux véhicules - par l'arrière",
valeur == 3 ~ "Deux véhicules - par le coté",
valeur == 4 ~ "Trois véhicules et plus - en chaine",
valeur == 5 ~ "Trois véhicules et plus - colisions multiples",
valeur == 6 ~ "Autre collision",
valeur == 7 ~ "Sans collision",
TRUE ~ "Valeur inconnue"
)
}
table(don$col)
col_quali <- sapply(don$col, type_collision)
table(col_quali)
don$col = col_quali
Luminisote <- function(valeur) {
case_when(
valeur == 1 ~ "Plein jour",
valeur == 2 ~ "Crépuscule ou aube",
valeur == 3 ~ "Nuit sans éclairage public",
valeur == 4 ~ "Nuit sans éclairage public non allumé",
valeur == 5 ~ "Nuit sans éclairage public allumé",
TRUE ~ "Valeur inconnue"
)
}
table(don$lum)
lum_quali <- sapply(don$lum, Luminisote)
table(lum_quali)
don$col = lum_quali
Cond_atmosph <- function(valeur) {
case_when(
valeur == 1 ~ "Normale",
valeur == 2 ~ "Pluie légère",
valeur == 3 ~ "Pluie forte",
valeur == 4 ~ "Neige - grêle",
valeur == 5 ~ "Brouillard - fumée",
valeur == 6 ~ "Vent fort - tempête",
valeur == 7 ~ "Temps éblouissant",
valeur == 8 ~ "Temps couvert",
valeur == 9 ~ "Autre",
TRUE ~ "Valeur inconnue"
)
}
table(don$atm)
atm_quali <- sapply(don$atm, Cond_atmosph)
table(atm_quali)
don$atm = atm_quali
# On visualise nos données :
View(don)
don$col = lum_quali
# On visualise nos données :
View(don)
table(col_quali)
don$col = col_quali
don$lum = lum_quali
# On visualise nos données :
View(don)
