data_filtered <- data %>%
group_by(Collision) %>%
filter(n() >= 500)
plot2 <- ggplot(data_filtered, aes(x = str_wrap(Collision, width = 10), fill = Consequence)) +
geom_bar(color = "black") +
labs(title = "Accidents par type de collision") +
ylab("Nb accidents") +
xlab("Collision") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
plot3 <- ggplot(data, aes(x = str_wrap(Equipement.secu, width=10), fill = Consequence)) +
geom_bar(color = "black") +
labs(title = "Accidents avec équipement de sécurité") +
ylab("Nb accidents") +
xlab("Equipement de sécurité") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
plot4 <- ggplot(filtered_data, aes(x = str_wrap(Choc.subi, width=10), fill = Consequence)) +
geom_bar(color = "black") +
ylab("Nb accidents") +
xlab("Choc subi") +
labs(title = "Accidents par choc subi") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(fill = guide_legend(title = "Conséquence"))
arranged_plots <- arrangeGrob(plot1 + theme(legend.position = "none"),
plot2 + theme(legend.position = "none"),
plot3 + theme(legend.position = "none"),
plot4 + theme(legend.position = "none"),
ncol = 2)
# Ajouter une légende en bas
legend <- cowplot::get_legend(plot4)
# Afficher le graphique final avec la légende en bas
gridExtra::grid.arrange(arranged_plots, legend, ncol = 1,
heights = c(15, 1))
################## Analyses univariées #################################
data <- read.csv("C:/Users/33662/Desktop/add_velo/data/data_clean.csv", sep=",", header = TRUE)
plot1 <- ggplot(data, aes(x = str_wrap(Contexte, width = 10), fill = Consequence)) +
geom_bar(color = "black") +
labs(title = "Accidents par contexte") +
ylab("Nb accidents") +
xlab("Contexte") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
data_filtered <- data %>%
group_by(Collision) %>%
filter(n() >= 500)
plot2 <- ggplot(data_filtered, aes(x = str_wrap(Collision, width = 10), fill = Consequence)) +
geom_bar(color = "black") +
labs(title = "Accidents par type de collision") +
ylab("Nb accidents") +
xlab("Collision") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
plot3 <- ggplot(data, aes(x = str_wrap(Equipement.secu, width=10), fill = Consequence)) +
geom_bar(color = "black") +
labs(title = "Accidents avec équipement de sécurité") +
ylab("Nb accidents") +
xlab("Equipement de sécurité") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
data_filtered <- data %>%
group_by(Choc.subi) %>%
filter(n() >= 500)
plot4 <- ggplot(filtered_data, aes(x = str_wrap(Choc.subi, width=10), fill = Consequence)) +
geom_bar(color = "black") +
ylab("Nb accidents") +
xlab("Choc subi") +
labs(title = "Accidents par choc subi") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(fill = guide_legend(title = "Conséquence"))
arranged_plots <- arrangeGrob(plot1 + theme(legend.position = "none"),
plot2 + theme(legend.position = "none"),
plot3 + theme(legend.position = "none"),
plot4 + theme(legend.position = "none"),
ncol = 2)
# Ajouter une légende en bas
legend <- cowplot::get_legend(plot4)
# Afficher le graphique final avec la légende en bas
gridExtra::grid.arrange(arranged_plots, legend, ncol = 1,
heights = c(15, 1))
unique(data$Equipement.secu)
################## Analyses univariées #################################
data <- read.csv("C:/Users/33662/Desktop/add_velo/data/data_clean.csv", sep=",", header = TRUE)
plot1 <- ggplot(data, aes(x = str_wrap(Contexte, width = 10), fill = Consequence)) +
geom_bar(color = "black") +
labs(title = "Accidents par contexte") +
ylab("Nb accidents") +
xlab("Contexte") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
data_filtered <- data %>%
group_by(Collision) %>%
filter(n() >= 500)
plot2 <- ggplot(data_filtered, aes(x = str_wrap(Collision, width = 10), fill = Consequence)) +
geom_bar(color = "black") +
labs(title = "Accidents par type de collision") +
ylab("Nb accidents") +
xlab("Collision") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
# Filtrer les données pour exclure les catégories vides
data_filtered <- data %>%
filter(Equipement.secu != "")
plot3 <- ggplot(data_filtered, aes(x = str_wrap(Equipement.secu, width=10), fill = Consequence)) +
geom_bar(color = "black") +
labs(title = "Accidents avec équipement de sécurité") +
ylab("Nb accidents") +
xlab("Equipement de sécurité") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
data_filtered <- data %>%
group_by(Choc.subi) %>%
filter(n() >= 500)
plot4 <- ggplot(filtered_data, aes(x = str_wrap(Choc.subi, width=10), fill = Consequence)) +
geom_bar(color = "black") +
ylab("Nb accidents") +
xlab("Choc subi") +
labs(title = "Accidents par choc subi") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(fill = guide_legend(title = "Conséquence"))
arranged_plots <- arrangeGrob(plot1 + theme(legend.position = "none"),
plot2 + theme(legend.position = "none"),
plot3 + theme(legend.position = "none"),
plot4 + theme(legend.position = "none"),
ncol = 2)
# Ajouter une légende en bas
legend <- cowplot::get_legend(plot4)
# Afficher le graphique final avec la légende en bas
gridExtra::grid.arrange(arranged_plots, legend, ncol = 1,
heights = c(15, 1))
################## Analyses univariées #################################
data <- read.csv("C:/Users/33662/Desktop/add_velo/data/data_clean.csv", sep=",", header = TRUE)
plot1 <- ggplot(data, aes(x = str_wrap(Contexte, width = 10), fill = Consequence)) +
geom_bar(color = "black") +
labs(title = "Accidents par contexte") +
ylab("Nb accidents") +
xlab("Contexte") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
data_filtered <- data %>%
group_by(Collision) %>%
filter(n() >= 500)
plot2 <- ggplot(data_filtered, aes(x = str_wrap(Collision, width = 10), fill = Consequence)) +
geom_bar(color = "black") +
labs(title = "Accidents par type de collision") +
ylab("Nb accidents") +
xlab("Collision") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
# Filtrer les données pour exclure les catégories vides
data_filtered <- data %>%
filter(Equipement.secu != "")
plot3 <- ggplot(data_filtered, aes(x = str_wrap(Equipement.secu, width=10), fill = Consequence)) +
geom_bar(color = "black") +
labs(title = "Accidents avec équipement de sécurité") +
ylab("Nb accidents") +
xlab("Equipement de sécurité") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
data_filtered <- data %>%
group_by(Choc.subi) %>%
filter(n() >= 500)
plot4 <- ggplot(data_filtered, aes(x = str_wrap(Choc.subi, width=10), fill = Consequence)) +
geom_bar(color = "black") +
ylab("Nb accidents") +
xlab("Choc subi") +
labs(title = "Accidents par choc subi") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(fill = guide_legend(title = "Conséquence"))
arranged_plots <- arrangeGrob(plot1 + theme(legend.position = "none"),
plot2 + theme(legend.position = "none"),
plot3 + theme(legend.position = "none"),
plot4 + theme(legend.position = "none"),
ncol = 2)
# Ajouter une légende en bas
legend <- cowplot::get_legend(plot4)
# Afficher le graphique final avec la légende en bas
gridExtra::grid.arrange(arranged_plots, legend, ncol = 1,
heights = c(15, 1))
############################# PROJET ADD analyse -- Léo GABET ###################################
############################### Charger les différentes librairies ######################################
library(installr)
library(lmtest)
library(tidyverse)
library(data.table)
library(magrittr)
library(DAAG)
library(plotly)
library(tseries)
library(olsrr)
library(car)
library(readr)
library(readxl)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(openxlsx)
library(Factoshiny)
library(gridExtra)
######################### PISTE CYCLABLE VELO PARIS ########################################
data_piste_paris <- read.table("C:/Users/33662/Desktop/add_velo/data/data_cycle-piste.csv", sep=",", header = TRUE)
View(data)
view(data_piste_paris)
############################# ANALYSE PISTE CYCLABLE PARIS #########################
df <- data_piste_paris
# Créer un graphique à barres empilées pour l'évolution des arrondissements par année
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
labs(title = "Évolution des pistes cyclables dans les arrondissements au fil des années") +
theme_minimal()
# Créer un graphique à barres empilées pour l'évolution des arrondissements par année
df <- df %>%
filter(x != "NA")
# Créer un graphique à barres empilées pour l'évolution des arrondissements par année
df <- df %>%
filter(an != "NA")
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
labs(title = "Évolution des pistes cyclables dans les arrondissements au fil des années") +
theme_minimal()
# Créer un graphique à barres empilées pour l'évolution des arrondissements par année
df <- df %>%
filter(an != NA)
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
labs(title = "Évolution des pistes cyclables dans les arrondissements au fil des années") +
theme_minimal()
# Créer un graphique à barres empilées pour l'évolution des arrondissements par année
df <- df %>%
filter(Arrondissement != "NA")
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
labs(title = "Évolution des pistes cyclables dans les arrondissements au fil des années") +
theme_minimal()
############################# ANALYSE PISTE CYCLABLE PARIS #########################
df <- data_piste_paris
# Créer un graphique à barres empilées pour l'évolution des arrondissements par année
df <- df %>%
filter(Arrondissement != "NA")
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
labs(title = "Évolution des pistes cyclables dans les arrondissements au fil des années") +
theme_minimal()
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
labs(title = "Évolution des pistes cyclables dans les arrondissements au fil des années") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
labs(title = "Évolution des pistes cyclables dans les arrondissements au fil des années") +
theme_minimal() +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Arrondissements"))
knitr::opts_chunk$set(fig.pos = "H", out.width = "100%", fig.align = "center")
###### Charger les différentes librairies
library(installr)
library(lmtest)
library(tidyverse)
library(data.table)
library(magrittr)
library(DAAG)
library(plotly)
library(tseries)
library(olsrr)
library(car)
library(readr)
library(readxl)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(openxlsx)
library(Factoshiny)
library(gridExtra)
library(cowplot)
library(stringr)
####################### ANALYSE PISTE CYCLABLE PARIS
data_piste_paris <- read.table("C:/Users/33662/Desktop/add_velo/data/data_cycle-piste.csv", sep=",", header = TRUE)
df <- data_piste_paris
# Créer un graphique à barres empilées pour l'évolution des arrondissements par année
df <- df %>%
filter(Arrondissement != "NA")
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
ylab("Nb aménagement") +
theme_minimal() +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Arrondissements"))
####################### ANALYSE PISTE CYCLABLE PARIS
data_piste_paris <- read.table("C:/Users/33662/Desktop/add_velo/data/data_cycle-piste.csv", sep=",", header = TRUE)
df <- data_piste_paris
# Créer un graphique à barres empilées pour l'évolution des arrondissements par année
df <- df %>%
filter(Arrondissement != "NA")
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
ylab("Nb aménagement") +
theme_minimal() +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Arrondissements"))
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = Arrondissement)) +
geom_bar(position = "stack", color = "black") +
facet_wrap(~Typologie, scales = "free_y") +
labs(title = "Évolution des typologies des pistes par arrondissement au fil des années") +
theme_minimal()
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = factor(Arrondissement)) +
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
facet_wrap(~Typologie, scales = "free_y") +
labs(title = "Évolution des typologies des pistes par arrondissement au fil des années") +
theme_minimal()
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = Arrondissement)) +
geom_bar(position = "stack", color = "black") +
facet_wrap(~Typologie, scales = "free_y") +
labs(title = "Évolution des typologies des pistes par arrondissement au fil des années") +
theme_minimal()
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = Arrondissement)) +
geom_bar(position = "stack", color = "skyblue") +
facet_wrap(~Typologie, scales = "free_y") +
labs(title = "Évolution des typologies des pistes par arrondissement au fil des années") +
theme_minimal()
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = Arrondissement)) +
geom_bar(position = "stack", color = "black") +
facet_wrap(~Typologie, scales = "free_x") +
labs(title = "Évolution des typologies des pistes par arrondissement au fil des années") +
theme_minimal()
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = Arrondissement)) +
geom_bar(position = "stack", color = "black") +
facet_wrap(~Typologie, scales = "free_y") +
labs(title = "Évolution des typologies des pistes par arrondissement au fil des années") +
theme_minimal()
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
facet_wrap(~Typologie, scales = "free_y") +
labs(title = "Évolution des typologies des pistes par arrondissement au fil des années") +
theme_minimal()
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
facet_wrap(~Typologie, scales = "free_y") +
labs(title = "Évolution des typologies des pistes par arrondissement au fil des années") +
theme_minimal()+
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Arrondissements"))
unique(df$Typologie)
df <- df %>%
mutate(Typologie = recode(Typologie, "Autres itineraires cyclables (ex : Aires pietonnes - Contre-sens cyclables)" = "Aires pietonnes"))
library(dplyr)
df <- df %>%
mutate(Typologie = recode(Typologie, "Autres itineraires cyclables (ex : Aires pietonnes - Contre-sens cyclables)" = "Aires pietonnes"))
# Change les valeurs dans la colonne "Typologie"
df <- df %>%
mutate(Typologie = ifelse(Typologie == "Autres itineraires cyclables (ex : Aires pietonnes - Contre-sens cyclables)", "Aires pietonnes", Typologie))
# Affiche le data frame après le changement
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
facet_wrap(~Typologie, scales = "free_y") +
labs(title = "Évolution des typologies des pistes par arrondissement au fil des années") +
theme_minimal()+
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Arrondissements"))
# Créer un graphique à barres empilées pour l'évolution des arrondissements par année
df <- df %>%
filter(Arrondissement != "NA")
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
labs(title = "Évolution des pistes cyclables dans les arrondissements au fil des années") +
theme_minimal() +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Arrondissements"))
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
labs(title = "Évolution des pistes cyclables dans les arrondissements au fil des années") +
theme_minimal() +
ylab("Nb aménagement")+
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Arrondissements"))
# Change les valeurs dans la colonne "Typologie"
df <- df %>%
mutate(Typologie = ifelse(Typologie == "Autres itineraires cyclables (ex : Aires pietonnes - Contre-sens cyclables)", "Aires pietonnes", Typologie))
# Affiche le data frame après le changement
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
facet_wrap(~Typologie, scales = "free_y") +
labs(title = "Évolution des typologies des pistes par arrondissement au fil des années") +
theme_minimal()+
ylab("Nb aménagement")+
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Arrondissements"))
# Affiche le data frame après le changement
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
facet_wrap(~Typologie, scales = "free_y") +
labs(title = "Évolution des typologies des pistes par arrondissement au fil des années") +
theme_minimal()+
ylab("Nb aménagement")+
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Arrondissements")) +
# Ajustez la taille de la légende en modifiant les paramètres du thème
theme(legend.key.size = unit(0.5, "cm"), # Ajuste la taille de la clé de la légende
legend.title = element_text(size = 8), # Ajuste la taille du titre de la légende
legend.text = element_text(size = 8)) # Ajuste la taille du texte de la légende
# Affiche le data frame après le changement
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
facet_wrap(~Typologie, scales = "free_y") +
labs(title = "Évolution des typologies des pistes par arrondissement au fil des années") +
theme_minimal()+
ylab("Nb aménagement")+
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Arrondissements")) +
# Ajustez la taille de la légende en modifiant les paramètres du thème
theme(legend.key.size = unit(0.5, "cm"), # Ajuste la taille de la clé de la légende
legend.title = element_text(size = 4), # Ajuste la taille du titre de la légende
legend.text = element_text(size = 4)) # Ajuste la taille du texte de la légende
# Affiche le data frame après le changement
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
facet_wrap(~Typologie, scales = "free_y") +
labs(title = "Évolution des typologies des pistes par arrondissement au fil des années") +
theme_minimal()+
ylab("Nb aménagement")+
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Arrondissements")) +
# Ajustez la taille de la légende en modifiant les paramètres du thème
theme(legend.key.size = unit(0.2, "cm"), # Ajuste la taille de la clé de la légende
legend.title = element_text(size = 4), # Ajuste la taille du titre de la légende
legend.text = element_text(size = 4)) # Ajuste la taille du texte de la légende
# Affiche le data frame après le changement
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
facet_wrap(~Typologie, scales = "free_y") +
labs(title = "Évolution des typologies des pistes par arrondissement au fil des années") +
theme_minimal()+
ylab("Nb aménagement")+
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Arrondissements")) +
# Ajustez la taille de la légende en modifiant les paramètres du thème
theme(legend.key.size = unit(0.3, "cm"), # Ajuste la taille de la clé de la légende
legend.title = element_text(size = 6), # Ajuste la taille du titre de la légende
legend.text = element_text(size = 5)) # Ajuste la taille du texte de la légende
######################## PARIS #########################"
don <- read.table("C:/Users/33662/Desktop/add_velo/data/data_paris.csv", sep=",", header = TRUE)
ggplot(don, aes(x = Arrondissement, fill = Consequence)) +
geom_bar(stat = "count", color = "black") +
coord_flip() +  # Cela inverse les axes, rendant le graphique horizontal
xlab("Arrondissement") +
ylab("Nb accidents") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "bottom")
ggplot(don, aes(x = Arrondissement, fill = Consequence.x)) +
geom_bar(stat = "count", color = "black") +
coord_flip() +  # Cela inverse les axes, rendant le graphique horizontal
xlab("Arrondissement") +
ylab("Nb accidents") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "bottom")
ggplot(don, aes(x = Arrondissement, fill = Consequence.x)) +
geom_bar(stat = "count", color = "black") +
coord_flip() +  # Cela inverse les axes, rendant le graphique horizontal
xlab("Arrondissement") +
ylab("Nb accidents") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "bottom")+
guides(fill = guide_legend(title = "Conséquence"))
ggplot(don, aes(x = Arrondissement, fill = Consequence.x)) +
geom_bar(stat = "count", color = "black") +
# Cela inverse les axes, rendant le graphique horizontal
xlab("Arrondissement") +
ylab("Nb accidents") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "bottom")+
guides(fill = guide_legend(title = "Conséquence"))
