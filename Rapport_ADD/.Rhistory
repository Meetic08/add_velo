# masses pour les lignes et les colonnes
nb_ind = sum(contingence)
masse_ligne = rowSums(contingence)/nb_ind
masse_col = colSums(contingence)/nb_ind
# Affichage graphe AFC
resultats_afc <- CA(contingence)
summary(resultats_afc)
############################## AFC ###############################
baseAFC = as.data.frame(cbind(data$Region,data$Consequence))
baseAFC
# tableau de contingence
contingence = table(baseAFC)
contingence
# profils lignes et colonnes
ligne = prop.table(contingence, margin = 1)
ligne
colonne = prop.table(contingence, margin = 2)
colonne
# masses pour les lignes et les colonnes
nb_ind = sum(contingence)
masse_ligne = rowSums(contingence)/nb_ind
masse_col = colSums(contingence)/nb_ind
# Affichage graphe AFC
resultats_afc <- CA(contingence)
summary(resultats_afc)
# Effectuer le test du Chi carré
chi_squared_test <- chisq.test(contingence)
chi_squared_test
# Visualiser les contributions des variables aux axes
fviz_contrib(resultats_afc, choice = "row")
# Visualiser les cosinus carrés des variables aux axes
fviz_cos2(resultats_afc, choice = "col")
############################# PROJET ADD analyse -- Léo GABET ###################################
############################### Charger les différentes librairies ######################################
library(installr)
library(lmtest)
library(tidyverse)
library(data.table)
library(magrittr)
library(DAAG)
library(plotly)
library(tseries)
library(olsrr)
library(car)
library(readr)
library(readxl)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(openxlsx)
library(Factoshiny)
library(gridExtra)
######################### ACCIDENTS VELO FRANCE #################################
data <- read.csv("C:/Users/33662/Desktop/add_velo/data/data_clean.csv", sep=",", header = TRUE)
data <- data %>%
mutate(dep = as.numeric(dep))
data <- data %>%
mutate(long = as.numeric(long))
colnames(data)
library(ca)
# Sélectionner les variables quantitatives
data_quantitative <- data[, c("an", "age", "dep")]
# Vérifier et remplir les valeurs manquantes si nécessaire
data_quantitative <- na.omit(data_quantitative)
# Appliquer l'ACP avec le package FactoMineR
acp_result <- PCA(data_quantitative, scale.unit = TRUE, graph = FALSE)
# Afficher un résumé des résultats
summary(acp_result)
# Graphiques de l'ACP
options(repr.plot.width=10, repr.plot.height=5)  # Ajuster la taille des graphiques
par(mfrow = c(1, 3))  # Une ligne de trois colonnes pour afficher les trois graphiques
# Variance expliquée
plot(acp_result, choix = "var")
# Nuage de points des individus
plot(acp_result, choix = "ind")
# Sélectionner les variables quantitatives
data_quantitative <- data[, c("an", "age", "dep")]
# Vérifier et remplir les valeurs manquantes si nécessaire
data_quantitative <- na.omit(data_quantitative)
# Appliquer l'ACP avec le package FactoMineR
acp_result <- PCA(data_quantitative, scale.unit = TRUE, graph = FALSE)
# Afficher un résumé des résultats
summary(acp_result)
# Graphiques de l'ACP
options(repr.plot.width=10, repr.plot.height=5)  # Ajuster la taille des graphiques
par(mfrow = c(1, 3))  # Une ligne de trois colonnes pour afficher les trois graphiques
# Variance expliquée
plot(acp_result, choix = "var")
# Nuage de points des individus
plot(acp_result, choix = "ind")
par(mfrow = c(1, 2))  # Une ligne de trois colonnes pour afficher les trois graphiques
# Variance expliquée
plot(acp_result, choix = "var")
acp_result
# Afficher un résumé des résultats
summary(acp_result)
# Nuage de points des individus
plot(acp_result, choix = "ind", habillage = "")
# Nuage de points des individus
plot(acp_result, choix = "ind", habillage = "FALSE")
# Nuage de points des individus
plot(acp_result, choix = "ind", habillage = FALSE)
# Nuage de points des individus
plot(acp_result, choix = "ind", label = FALSE)
# Nuage de points des individus
plot(acp_result, choix = "ind", label = none)
# Nuage de points des individus
plot(acp_result, choix = "ind", label = "none")
# Nuage de points des individus
plot(acp_result, choix = "ind", label = "ind.sup")
# Nuage de points des individus
plot(acp_result, choix = "ind", label = "none")
# Afficher un résumé des résultats
summary(acp_result)
# Variance expliquée
par(mfrow = c(1, 2))  # 1 ligne, 2 colonnes
plot(acp_result, choix = "var", main = "Variance expliquée")
# Nuage de points des individus sans labels
plot(acp_result, choix = "ind", label = "none", main = "Nuage de points des individus")
# Variance expliquée
plot(acp_result, choix = "var", main = "Variance expliquée")
# Nuage de points des individus sans labels
plot(acp_result, choix = "ind", label = "none", main = "Nuage de points des individus")
# Définir la disposition en deux colonnes
layout(matrix(1:2, nrow = 1))
# Variance expliquée
plot(acp_result, choix = "var", main = "Variance expliquée")
# Nuage de points des individus sans labels
plot(acp_result, choix = "ind", label = "none", main = "Nuage de points des individus")
# Variance expliquée
plot1 <- plot(acp_result, choix = "var", main = "Variance expliquée")
# Nuage de points des individus sans labels
plot2 <- plot(acp_result, choix = "ind", label = "none", main = "Nuage de points des individus")
arranged_plots <- arrangeGrob(plot1,plot2)
# Afficher le graphique final avec la légende en bas
gridExtra::grid.arrange(arranged_plots, ncol = 1,
heights = c(15, 1))
# Afficher le graphique final avec la légende en bas
gridExtra::grid.arrange(arranged_plots, ncol = 1)
# Afficher le graphique final avec la légende en bas
gridExtra::grid.arrange(arranged_plots)
# Afficher le graphique final avec la légende en bas
gridExtra::grid.arrange(arranged_plots, nrow=1)
# Variance expliquée
plot1 <- plot(acp_result, choix = "var", main = "Variance expliquée")
# Nuage de points des individus sans labels
plot2 <- plot(acp_result, choix = "ind", label = "none", main = "Nuage de points des individus")
# Organiser les graphiques côte à côte
arranged_plots <- gridExtra::arrangeGrob(plot1, plot2, ncol = 2)
# Afficher le graphique final
gridExtra::grid.arrange(arranged_plots)
knitr::opts_chunk$set(fig.pos = "H", out.width = "80%", fig.align = "center")
###### Charger les différentes librairies
library(installr)
library(lmtest)
library(tidyverse)
library(data.table)
library(magrittr)
library(DAAG)
library(plotly)
library(tseries)
library(olsrr)
library(car)
library(readr)
library(readxl)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(openxlsx)
library(Factoshiny)
library(gridExtra)
library(cowplot)
library(stringr)
data <- read.csv("C:/Users/33662/Desktop/add_velo/data/data_clean.csv", sep=",", header = TRUE)
data <- data %>%
mutate(dep = as.numeric(dep))
data <- data %>%
mutate(long = as.numeric(long))
# Sélectionner les variables quantitatives
data_quantitative <- data[, c("an", "age", "dep")]
# Vérifier et remplir les valeurs manquantes si nécessaire
data_quantitative <- na.omit(data_quantitative)
# Appliquer l'ACP avec le package FactoMineR
acp_result <- PCA(data_quantitative, scale.unit = TRUE, graph = FALSE)
# Afficher un résumé des résultats
summary(acp_result)
# Variance expliquée
plot1 <- plot(acp_result, choix = "var", main = "Variance expliquée")
# Nuage de points des individus sans labels
plot2 <- plot(acp_result, choix = "ind", label = "none", main = "Nuage de points des individus")
# Organiser les graphiques côte à côte
arranged_plots <- gridExtra::arrangeGrob(plot1, plot2, ncol = 2)
# Afficher le graphique final
gridExtra::grid.arrange(arranged_plots)
tate(long = as.numeric(long))
data <- read.csv("C:/Users/33662/Desktop/add_velo/data/data_clean.csv", sep=",", header = TRUE)
# Sélectionner les variables quantitatives
data_quantitative <- data[, c("an", "age", "dep")]
# Vérifier et remplir les valeurs manquantes si nécessaire
data_quantitative <- na.omit(data_quantitative)
# Appliquer l'ACP avec le package FactoMineR
acp_result <- PCA(data_quantitative, scale.unit = TRUE, graph = FALSE)
data <- read.csv("C:/Users/33662/Desktop/add_velo/data/data_clean.csv", sep=",", header = TRUE)
data <- data %>%
mutate(dep = as.numeric(dep))
# Sélectionner les variables quantitatives
data_quantitative <- data[, c("an", "age", "dep")]
# Vérifier et remplir les valeurs manquantes si nécessaire
data_quantitative <- na.omit(data_quantitative)
# Appliquer l'ACP avec le package FactoMineR
acp_result <- PCA(data_quantitative, scale.unit = TRUE, graph = FALSE)
# Afficher un résumé des résultats
summary(acp_result)
# Variance expliquée
plot1 <- plot(acp_result, choix = "var", main = "Variance expliquée")
# Nuage de points des individus sans labels
plot2 <- plot(acp_result, choix = "ind", label = "none", main = "Nuage de points des individus")
# Organiser les graphiques côte à côte
arranged_plots <- gridExtra::arrangeGrob(plot1, plot2, ncol = 2)
# Afficher le graphique final
gridExtra::grid.arrange(arranged_plots)
tate(long = as.numeric(long))
data <- read.csv("C:/Users/33662/Desktop/add_velo/data/data_clean.csv", sep=",", header = TRUE)
data <- data %>%
mutate(dep = as.numeric(dep))
# Sélectionner les variables quantitatives
data_quantitative <- data[, c("an", "age", "dep")]
# Vérifier et remplir les valeurs manquantes si nécessaire
data_quantitative <- na.omit(data_quantitative)
# Appliquer l'ACP avec le package FactoMineR
acp_result <- PCA(data_quantitative, scale.unit = TRUE, graph = FALSE)
# Afficher un résumé des résultats
summary(acp_result, n = 5)
# Afficher un résumé des résultats
summary(acp_result, n = 5)
# Afficher un résumé des résultats
summary(acp_result$ind$coord[1:5, , drop = FALSE])
# Afficher un résumé des résultats
summary(acp_result$ind$coord[1:5, , drop = FALSE])
# Afficher un résumé des résultats
head(summary(acp_result),3)
# Afficher un résumé des résultats
head(summary(acp_result), 3)
# Afficher un résumé des résultats
head(summary(acp_result), 10)
############################## AFC ###############################
baseAFC = as.data.frame(cbind(data$Region,data$Consequence))
baseAFC
# tableau de contingence
contingence = table(baseAFC)
contingence
############################## AFC1 ###############################
baseAFC = as.data.frame(cbind(data$Region,data$Consequence))
# tableau de contingence
contingence = table(baseAFC)
contingence
# profils lignes et colonnes
ligne = prop.table(contingence, margin = 1)
colonne = prop.table(contingence, margin = 2)
# masses pour les lignes et les colonnes
nb_ind = sum(contingence)
masse_ligne = rowSums(contingence)/nb_ind
masse_col = colSums(contingence)/nb_ind
# Affichage graphe AFC
resultats_afc <- CA(contingence)
summary(resultats_afc)
# Effectuer le test du Chi carré
chi_squared_test <- chisq.test(contingence)
chi_squared_test
# Visualiser les contributions des variables aux axes
fviz_contrib(resultats_afc, choice = "row")
# Visualiser les cosinus carrés des variables aux axes
fviz_cos2(resultats_afc, choice = "col")
# Effectuer le test du Chi carré
chisq.test(contingence)
# Visualiser les contributions des variables aux axes
fviz_contrib(resultats_afc, choice = "row")
# Affichage graphe AFC
resultats_afc <- CA(contingence)
# Affichage graphe AFC
resultats_afc <- CA(contingence)
summary(resultats_afc)
# Affichage graphe AFC
resultats_afc <- CA(contingence)
# Affichage graphe AFC
plot1 <- resultats_afc <- CA(contingence)
############################## AFC1 ###############################
baseAFC = as.data.frame(cbind(data$Region,data$Consequence))
# tableau de contingence
contingence = table(baseAFC)
contingence
# profils lignes et colonnes
ligne = prop.table(contingence, margin = 1)
colonne = prop.table(contingence, margin = 2)
# masses pour les lignes et les colonnes
nb_ind = sum(contingence)
masse_ligne = rowSums(contingence)/nb_ind
masse_col = colSums(contingence)/nb_ind
# Effectuer le test du Chi carré
chisq.test(contingence)
# Affichage graphe AFC
resultats_afc <- CA(contingence)
# Visualiser les contributions des variables aux axes
fviz_contrib(resultats_afc, choice = "row")
summary(resultats_afc)
############################## AFC ###############################
baseAFC = as.data.frame(cbind(data$Consequence,data$Meteo))
baseAFC
# tableau de contingence
contingence = table(baseAFC)
contingence
# profils lignes et colonnes
ligne = prop.table(contingence, margin = 1)
ligne
colonne = prop.table(contingence, margin = 2)
colonne
# masses pour les lignes et les colonnes
nb_ind = sum(contingence)
masse_ligne = rowSums(contingence)/nb_ind
masse_col = colSums(contingence)/nb_ind
# Affichage graphe AFC
resultats_afc <- CA(contingence)
resultats_afc
# Effectuer le test du Chi carré
chi_squared_test <- chisq.test(contingence)
chi_squared_test
# Visualiser les contributions des variables aux axes
fviz_contrib(resultats_afc, choice = "row")
# Visualiser les cosinus carrés des variables aux axes
fviz_cos2(resultats_afc, choice = "col")
# Visualiser les contributions des variables aux axes
fviz_contrib(resultats_afc, choice = "row")
# Visualiser les cosinus carrés des variables aux axes
fviz_cos2(resultats_afc, choice = "col")
# Visualiser les contributions des variables aux axes
fviz_contrib(resultats_afc, choice = "row")
# Visualiser les contributions des variables aux axes
fviz_cos2(resultats_afc, choice = "row")
# Visualiser les contributions des variables aux axes
fviz_contrib(resultats_afc, choice = "row")
summary(resultats_afc)
############################## AFC1 ###############################
baseAFC = as.data.frame(cbind(data$Region,data$Consequence))
# tableau de contingence
contingence = table(baseAFC)
contingence
# profils lignes et colonnes
ligne = prop.table(contingence, margin = 1)
colonne = prop.table(contingence, margin = 2)
# masses pour les lignes et les colonnes
nb_ind = sum(contingence)
masse_ligne = rowSums(contingence)/nb_ind
masse_col = colSums(contingence)/nb_ind
# Effectuer le test du Chi carré
chisq.test(contingence)
# Affichage graphe AFC
resultats_afc <- CA(contingence)
summary(resultats_afc)
# Visualiser les contributions des variables aux axes
fviz_contrib(resultats_afc, choice = "row")
# Visualiser les contributions des variables aux axes
fviz_cos2(resultats_afc, choice = "row")
# Visualiser les contributions des variables aux axes
fviz_contrib(resultats_afc, choice = "row")
fviz_contrib(resultats_afc, choice = "col")
fviz_cos2(resultats_afc, choice = "col")
fviz_cos2(resultats_afc, choice = "row")
fviz_cos2(resultats_afc, choice = "col")
############################## AFC1 ###############################
baseAFC = as.data.frame(cbind(data$Meteo,data$Consequence))
# tableau de contingence
contingence = table(baseAFC)
contingence
# profils lignes et colonnes
ligne = prop.table(contingence, margin = 1)
colonne = prop.table(contingence, margin = 2)
# masses pour les lignes et les colonnes
nb_ind = sum(contingence)
masse_ligne = rowSums(contingence)/nb_ind
masse_col = colSums(contingence)/nb_ind
# Effectuer le test du Chi carré
chisq.test(contingence)
# Affichage graphe AFC
resultats_afc <- CA(contingence)
summary(resultats_afc)
# Visualiser les contributions des variables aux axes
fviz_contrib(resultats_afc, choice = "row")
fviz_cos2(resultats_afc, choice = "col")
fviz_cos2(resultats_afc, choice = "row")
############################## AFC1 ###############################
baseAFC = as.data.frame(cbind(data$Meteo,data$Contexte, data$Consequence))
# tableau de contingence
contingence = table(baseAFC)
contingence
# profils lignes et colonnes
ligne = prop.table(contingence, margin = 1)
colonne = prop.table(contingence, margin = 2)
# masses pour les lignes et les colonnes
nb_ind = sum(contingence)
masse_ligne = rowSums(contingence)/nb_ind
masse_col = colSums(contingence)/nb_ind
# Effectuer le test du Chi carré
chisq.test(contingence)
# Affichage graphe AFC
resultats_afc <- CA(contingence)
baseACM <- data.frame(Meteo = data$Meteo, Consequence = data$Consequence, Contexte = data$Contexte)
# Effectuer l'Analyse des Correspondances Multiples (ACM)
resultats_acm <- MCA(baseACM, graph = FALSE)
# Afficher les résultats de l'ACM
summary(resultats_acm)
# Visualiser les résultats (graphiques)
plot.MCA(resultats_acm)
# Visualiser les résultats (graphiques)
plot.MCA(resultats_acm, label="none")
# Visualiser les résultats (graphiques)
plot.MCA(resultats_acm)
# Visualiser les résultats (graphiques) sans afficher les labels des individus
fviz_ca_ind(resultats_acm, col.ind = "cos2", repel = TRUE, habillage = "Contexte", addEllipses = TRUE, ellipse.type = "confidence", ggtheme = theme_minimal())
library(FactoMineR)
# Visualiser les résultats (graphiques) sans afficher les labels des individus
fviz_ca_ind(resultats_acm, col.ind = "cos2", repel = TRUE, habillage = "Contexte", addEllipses = TRUE, ellipse.type = "confidence", ggtheme = theme_minimal())
# Visualiser les résultats (graphiques)
plot.MCA(resultats_acm, cex = 0, col.ind = "white", col.var = "black")
# Visualiser les résultats (graphiques)
plot.MCA(resultats_acm, cex = 0, col.var = "black")
# Visualiser les résultats (graphiques)
plot.MCA(resultats_acm, cex = 5
, col.var = "black")
# Visualiser les résultats (graphiques)
plot.MCA(resultats_acm, cex = 1
, col.var = "black")
# Visualiser les résultats (graphiques)
plot.MCA(resultats_acm, cex = 0,5
, col.var = "black")
# Visualiser les résultats (graphiques)
plot.MCA(resultats_acm, cex = 0.5
, col.var = "black")
Factoshiny(data)
plot.MCA(resultats_acm, choix='var',title="Graphe des variables")
plot.MCA(resultats_acm,title="Graphe de l'ACM",label =c('var'))
res.MCA<-MCA(data,quanti.sup=c(1,2,6,7,8,23),graph=FALSE)
res.MCA
plot.MCA(resultats_acm, choix='quanti.sup',title="Variables quantitatives suplémentaires")
plot.MCA(resultats_acm,title="Graphe de l'ACM",label =c('var'))
Factoshiny(data)
plot.MCA(resultats_acm,title="Graphe de l'ACM",label =c('var'))
# Définir les couleurs en fonction des catégories
couleurs <- c(Contexte = "red", Meteo = "blue", Consequence = "green")
# Graphe des individus avec couleurs différentes pour chaque variable
fviz_mca_ind(resultats_acm,
col.ind = couleurs,
title = "Graphe de l'ACM",
label = "var",
repel = TRUE  # pour éviter le chevauchement des étiquettes
)
plot.MCA(resultats_acm,col.ind = couleurs,title="Graphe de l'ACM",label =c('var'))
# Définir les couleurs pour chaque groupe de variables
col.var <- c("blue", "green", "red")
# Effectuer l'Analyse des Correspondances Multiples (ACM)
resultats_acm <- MCA(baseACM, graph = FALSE)
# Plot avec couleurs différentes pour les variables et sans noms d'individus
plot.MCA(resultats_acm, title = "Graphe de l'ACM", label = c('var'), cex = 0, col.ind = "white", col.var = col.var)
# Plot avec couleurs différentes pour les variables et sans noms d'individus
plot.MCA(resultats_acm, title = "Graphe de l'ACM", label = c('var'), col.var = col.var)
# Plot avec couleurs différentes pour les variables et sans noms d'individus
plot.MCA(resultats_acm, title = "Graphe de l'ACM", label = c('var'), col = col.var)
# Afficher les contributions des variables avec des couleurs spécifiques
fviz_contrib(resultats_acm, choice = "var", col = col.var, title = "Contribution des Variables - ACM")
# Définir les couleurs pour chaque groupe de variables
col.var <- c("blue", "green", "red")
# Effectuer l'Analyse des Correspondances Multiples (ACM)
resultats_acm <- MCA(baseACM, graph = FALSE)
# Plot avec couleurs différentes pour les variables et sans noms d'individus
plot.MCA(resultats_acm, title = "Graphe de l'ACM", invisible = "ind", col.var = col.var)
# Définir les couleurs pour chaque groupe de variables
col.var <- c("blue","blue", "green", "red")
# Effectuer l'Analyse des Correspondances Multiples (ACM)
resultats_acm <- MCA(baseACM, graph = FALSE)
# Plot avec couleurs différentes pour les variables et sans noms d'individus
plot.MCA(resultats_acm, title = "Graphe de l'ACM", invisible = "ind", col.var = col.var)
# Plot avec couleurs différentes pour les variables et sans noms d'individus
plot.MCA(resultats_acm, title = "Graphe de l'ACM", label = c('var'), col.var = col.var)
# Plot avec couleurs différentes pour les variables et sans noms d'individus
plot.MCA(resultats_acm, title = "Graphe de l'ACM", invisible = "ind", col.var = col.var)
# Définir les couleurs pour chaque groupe de variables
col.var <- c("blue", "blue","blue","blue","blue","blue","green", "red")
# Effectuer l'Analyse des Correspondances Multiples (ACM)
resultats_acm <- MCA(baseACM, graph = FALSE)
# Plot avec couleurs différentes pour les variables et sans noms d'individus
plot.MCA(resultats_acm, title = "Graphe de l'ACM", invisible = "ind", col.var = col.var)
############################## AFC ###############################
baseAFC = as.data.frame(cbind(data$Consequence,data$Meteo))
# Définir les couleurs pour chaque groupe de variables
col.var <- c("blue", "blue","blue","blue","blue","blue","blue","blue","green", "red")
# Effectuer l'Analyse des Correspondances Multiples (ACM)
resultats_acm <- MCA(baseACM, graph = FALSE)
# Plot avec couleurs différentes pour les variables et sans noms d'individus
plot.MCA(resultats_acm, title = "Graphe de l'ACM", invisible = "ind", col.var = col.var)
# Définir les couleurs pour chaque groupe de variables
col.var <- c("blue", "blue","blue","blue","blue","blue","blue","blue", "blue","blue","green", "red")
# Effectuer l'Analyse des Correspondances Multiples (ACM)
resultats_acm <- MCA(baseACM, graph = FALSE)
# Plot avec couleurs différentes pour les variables et sans noms d'individus
plot.MCA(resultats_acm, title = "Graphe de l'ACM", invisible = "ind", col.var = col.var)
############################## AFC ###############################
baseAFC = as.data.frame(cbind(data$Consequence,data$Meteo))
# Définir les couleurs pour chaque groupe de variables
col.var <- c("blue", "blue","blue","blue","blue","blue","blue","blue", "blue","blue","blue","green", "red")
# Effectuer l'Analyse des Correspondances Multiples (ACM)
resultats_acm <- MCA(baseACM, graph = FALSE)
# Plot avec couleurs différentes pour les variables et sans noms d'individus
plot.MCA(resultats_acm, title = "Graphe de l'ACM", invisible = "ind", col.var = col.var)
