gridExtra::grid.arrange(arranged_plots, legend, ncol = 1,
heights = c(15, 1))
# Change les valeurs dans la colonne "Typologie"
df <- df %>%
mutate(Typologie = ifelse(Typologie == "Autres itineraires cyclables (ex : Aires pietonnes - Contre-sens cyclables)", "Aires pietonnes", Typologie))
# Affiche le data frame après le changement
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
facet_wrap(~Typologie, scales = "free_y") +
theme_minimal()+
ylab("Nb aménagement")+
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Arrondissements")) +
# Ajustez la taille de la légende en modifiant les paramètres du thème
theme(legend.key.size = unit(0.3, "cm"), # Ajuste la taille de la clé de la légende
legend.title = element_text(size = 6), # Ajuste la taille du titre de la légende
legend.text = element_text(size = 5)) # Ajuste la taille du texte de la légende
################## Analyses univariées #################################
data <- read.csv("C:/Users/33662/Desktop/add_velo/data/data_paris.csv", sep=",", header = TRUE)
plot1 <- ggplot(data, aes(x = an, fill = Consequence.x)) +
geom_histogram(breaks = seq(min(data$an), max(data$an)),
width = 2, color = "black", alpha = 0.7) +
geom_density(alpha = 0.2) +
labs(title = "Accidents par an") +
ylab("Nb accidents") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none")
# Créer un facteur ordonné avec les niveaux des mois
data$mois <- factor(data$mois, levels = c("janvier", "fevrier", "mars", "avril", "mai", "juin", "juillet", "aout", "septembre", "octobre", "novembre", "decembre"))
plot2 <- ggplot(data, aes(x = mois, fill = Consequence.x)) +
geom_bar(color = "black") +
labs(title = "Accidents par mois") +
ylab("Nb accidents") +
theme_minimal() +
scale_x_discrete(breaks = c("janvier", "avril", "aout", "decembre")) +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none")
# Créer un facteur ordonné avec les niveaux des jours
data$jour <- factor(data$jour, levels = c("lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi", "dimanche"))
plot3 <- ggplot(data, aes(x = jour, fill = Consequence.x)) +
geom_bar(color = "black") +
labs(title = "Accidents par jour") +
ylab("Nb accidents") +
theme_minimal() +
scale_x_discrete(breaks = c("lundi", "mercredi", "vendredi", "dimanche")) +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none")
# Créer un facteur ordonné avec les niveaux les heures
data$Tranche_horaire <- factor(data$Tranche_horaire, levels = c("Matin", "Apres-midi", "Soir", "Nuit", "NA"))
filtered_data <- data[!is.na(data$Tranche_horaire), ]
# Créer le graphique avec les données filtrées
plot4 <- ggplot(filtered_data, aes(x = Tranche_horaire, fill = Consequence.x)) +
geom_bar(color = "black") +
ylab("Nb accidents") +
labs(title = "Accidents par tranche horaire") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Conséquence"))
arranged_plots <- arrangeGrob(plot1 + theme(legend.position = "none"),
plot2 + theme(legend.position = "none"),
plot3 + theme(legend.position = "none"),
plot4 + theme(legend.position = "none"),
ncol = 2)
# Ajouter une légende en bas
legend <- cowplot::get_legend(plot4)
# Afficher le graphique final avec la légende en bas
gridExtra::grid.arrange(arranged_plots, legend, ncol = 1,
heights = c(15, 1))
######################## PARIS #########################"
don <- read.table("C:/Users/33662/Desktop/add_velo/data/data_paris.csv", sep=",", header = TRUE)
ggplot(don, aes(x = Arrondissement, fill = Consequence.x)) +
geom_bar(stat = "count", color = "black") +
coord_flip() +  # Cela inverse les axes, rendant le graphique horizontal
xlab("Arrondissement") +
ylab("Nb accidents") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "bottom")+
guides(fill = guide_legend(title = "Conséquence"))
################## Analyses univariées #################################
don <- read.table("C:/Users/33662/Desktop/add_velo/data/data_paris.csv", sep=",", header = TRUE)
data <- don
plot1 <- ggplot(data, aes(x = str_wrap(Contexte, width = 10), fill = Consequence.x)) +
geom_bar(color = "black") +
labs(title = "Accidents par contexte") +
ylab("Nb accidents") +
xlab("Contexte") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
data_filtered <- data %>%
group_by(Collision) %>%
filter(n() >= 50)
plot2 <- ggplot(data_filtered, aes(x = str_wrap(Collision, width = 10), fill = Consequence.x)) +
geom_bar(color = "black") +
labs(title = "Accidents par type de collision") +
ylab("Nb accidents") +
xlab("Collision") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
# Filtrer les données pour exclure les catégories vides
data_filtered <- data %>%
filter(Equipement.secu != "")
plot3 <- ggplot(data_filtered, aes(x = str_wrap(Equipement.secu, width=10), fill = Consequence.x)) +
geom_bar(color = "black") +
labs(title = "Accidents avec équipement de sécurité") +
ylab("Nb accidents") +
xlab("Equipement de sécurité") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
data_filtered <- data %>%
group_by(Choc.subi) %>%
filter(n() >= 50)
plot4 <- ggplot(data_filtered, aes(x = str_wrap(Choc.subi, width=10), fill = Consequence.x)) +
geom_bar(color = "black") +
ylab("Nb accidents") +
xlab("Choc subi") +
labs(title = "Accidents par choc subi") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(fill = guide_legend(title = "Conséquence"))
arranged_plots <- arrangeGrob(plot1 + theme(legend.position = "none"),
plot2 + theme(legend.position = "none"),
plot3 + theme(legend.position = "none"),
plot4 + theme(legend.position = "none"),
ncol = 2)
# Ajouter une légende en bas
legend <- cowplot::get_legend(plot4)
# Afficher le graphique final avec la légende en bas
gridExtra::grid.arrange(arranged_plots, legend, ncol = 1,
heights = c(15, 1))
################## Analyses univariées #################################
data <- read.csv("C:/Users/33662/Desktop/add_velo/data/data_clean.csv", sep=",", header = TRUE)
data <- data %>%
mutate(dep = as.numeric(dep))
data <- data %>%
mutate(long = as.numeric(long))
# Créer des catégories d'âge
data$age_category <- cut(data$age, breaks = c(0, 18, 30, 45, 60, Inf),
labels = c("0-18", "19-30", "31-45", "46-60", "60+"))
# Tracé
plot1 <- ggplot(data, aes(x = age_category, fill = Consequence)) +
geom_bar(position = "dodge", color = "black", alpha = 0.7) +
labs(title = "Accidents par catégorie d'âge") +
ylab("Nb accidents") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none")
# Créer le graphique avec les données filtrées
plot4 <- ggplot(data, aes(x = Genre, fill = Consequence)) +
geom_bar(color = "black") +
ylab("Nb accidents") +
labs(title = "Accidents par Genre") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Conséquence"))
arranged_plots <- arrangeGrob(plot1 + theme(legend.position = "none"),
plot4 + theme(legend.position = "none"),
ncol = 2)
# Ajouter une légende en bas
legend <- cowplot::get_legend(plot4)
# Afficher le graphique final avec la légende en bas
gridExtra::grid.arrange(arranged_plots, legend, ncol = 1,
heights = c(15, 1))
data <- read.csv("C:/Users/33662/Desktop/add_velo/data/data_clean.csv", sep=",", header = TRUE)
data <- data %>%
mutate(dep = as.numeric(dep))
# Sélectionner les variables quantitatives
data_quantitative <- data[, c("an", "age", "dep")]
# Vérifier et remplir les valeurs manquantes si nécessaire
data_quantitative <- na.omit(data_quantitative)
# Appliquer l'ACP avec le package FactoMineR
acp_result <- PCA(data_quantitative, scale.unit = TRUE, graph = FALSE)
# Afficher un résumé des résultats
summary(acp_result)
# Variance expliquée
plot1 <- plot(acp_result, choix = "var", main = "Variance expliquée")
# Nuage de points des individus sans labels
plot2 <- plot(acp_result, choix = "ind", label = "none", main = "Nuage de points des individus")
# Organiser les graphiques côte à côte
arranged_plots <- gridExtra::arrangeGrob(plot1, plot2, ncol = 2)
# Afficher le graphique final
gridExtra::grid.arrange(arranged_plots)
res.MCA<-MCA(data,quanti.sup=c(1,2,6,7,8,23),quali.sup=c(16,17),graph=FALSE)
plot.MCA(res.MCA,invisible= c('var','quali.sup'),habillage=21,title="Graphe de l'ACM",cex=0.5,cex.main=0.7,cex.axis=0.7,
cex.lab.mod=3,label =c('var'), col.var="darkcyan",
xlim = c(-1.1, 1.5), ylim = c(-0.75, 1.40), autoLab = "y")
res.MCA<-MCA(data,quanti.sup=c(1,2,6,7,8,23),quali.sup=c(16,17),graph=FALSE)
plot.MCA(res.MCA,invisible= c('var','quali.sup'),habillage=21,title="Graphe de l'ACM",cex=0.8,cex.main=0.7,cex.axis=0.7,
cex.lab.mod=3,label =c('var'), col.var="darkcyan",
xlim = c(-1.1, 1.5), ylim = c(-0.75, 1.40), autoLab = "y")
res.MCA<-MCA(data,quanti.sup=c(1,2,6,7,8,23),quali.sup=c(16,17),graph=FALSE)
plot.MCA(res.MCA,invisible= c('ind','quali.sup'),habillage=21,cex=0.6,cex.main=0.7,cex.axis=0.7,
cex.lab.mod=3,label =c('var'), col.var="darkcyan",
xlim = c(-1.1, 1.5), ylim = c(-0.75, 1.40), autoLab = "y")
##### modalite #########
res.MCA<-MCA(data,quanti.sup=c(1,2,6,7,8,23),graph=FALSE)
plot.MCA(res.MCA, choix='var',invisible=c('quali.sup','quanti.sup'),cex=0.6,cex.main=0.85,cex.axis=0.85, autoLab="y")
res.MCA<-MCA(data,quanti.sup=c(1,2,6,7,8,23),quali.sup=c(3,4,5,10,11,12,13,15,16,17,18,19,20,22,24,25,26,27,28),graph=FALSE)
plot.MCA(res.MCA,invisible= c('ind','quali.sup'),col.var=c(1,1,2,2,2,2,2,2,2,2,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4),col.quali.sup=c(5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,13,13,13,13,13,13,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,18,18,19,19,19,19,19,19,19,20,20,21,21,21,21,21,21,21,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23),
cex=0.7,cex.main=0.75,cex.axis=0.75,label =c('var'),
xlim = c(-1.5, 2.5), ylim = c(-0.75, 1.7), autoLab = "y")
res.MCA<-MCA(data,quanti.sup=c(1,2,6,7,8,23),quali.sup=c(3,4,5,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28),graph=FALSE)
plot.MCA(res.MCA,invisible= c('ind','quali.sup'),col.var=c(1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3),col.quali.sup=c(4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,14,14,14,14,14,14,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,19,19,20,20,21,21,21,21,21,21,21,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23),
label =c('var'), cex=0.8,cex.main=0.75,cex.axis=0.75,
xlim = c(-1.5, 2.5), ylim = c(-0.75, 1.5), autoLab = "y")
############################## AFC1 ###############################
baseAFC = as.data.frame(cbind(data$Region,data$Consequence))
# tableau de contingence
contingence = table(baseAFC)
contingence
# profils lignes et colonnes
ligne = prop.table(contingence, margin = 1)
colonne = prop.table(contingence, margin = 2)
# masses pour les lignes et les colonnes
nb_ind = sum(contingence)
masse_ligne = rowSums(contingence)/nb_ind
masse_col = colSums(contingence)/nb_ind
# Effectuer le test du Chi carré
chisq.test(contingence)
# Affichage graphe AFC
resultats_afc <- CA(contingence)
# Visualiser les contributions des variables aux axes
fviz_contrib(resultats_afc, choice = "row")
# Visualiser les contributions des variables aux axes
fviz_cos2(resultats_afc, choice = "col")
####### CAS PARIS ACM ###############
data <- read.table("C:/Users/33662/Desktop/add_velo/data/data_paris.csv", sep=",", header = TRUE)
data <- data %>% select(-Consequence.y)
convertir_arrondissement <- function(numero) {
if (numero >= 1 && numero <= 20) {
chiffres <- c("premier", "deuxième", "troisième", "quatrième", "cinquième",
"sixième", "septième", "huitième", "neuvième", "dixième",
"onzième", "douzième", "treizième", "quatorzième", "quinzième",
"seizième", "dix-septième", "dix-huitième", "dix-neuvième", "vingtième")
return(paste0(chiffres[numero], " arr"))
} else {
return("Arrondissement hors plage (1-20)")
}
}
# Supposons que votre dataframe s'appelle "data" :
data$Arrondissement <- sapply(data$Arrondissement, convertir_arrondissement)
### consequence
res.MCA<-MCA(data,quanti.sup=c(1,2,3,6,23),quali.sup=c(7,8,9,11,12,13,14,16,17,18,19,20,21,27),graph=FALSE)
plotellipses(res.MCA,keepvar=4,label ='quali')
res.MCA<-MCA(data,quanti.sup=c(1,2,3,6,23),quali.sup=c(7,8,9,11,12,13,14,16,17,18,19,20,21,27),graph=FALSE)
plot.MCA(res.MCA,invisible= c('ind','quali.sup'),label =c('var'),
col.var = "darkcyan", cex = 0.7, cex.main = 0.75, cex.axis = 0.75,
xlim = c(-2, 1.5), ylim = c(-1.5, 1.5), cex.lab = 0.7, autoLab = "y")
res.MCA<-MCA(data,quanti.sup=c(1,2,3,6,23),quali.sup=c(7,8,9,11,12,13,14,16,17,18,19,20,21,27),graph=FALSE)
plot.MCA(res.MCA,invisible= c('ind','quali.sup'),label =c('var'),
col.var = "darkcyan", cex = 0.6, cex.main = 0.75, cex.axis = 0.75,
xlim = c(-2, 1.5), ylim = c(-1.5, 1.5), cex.lab = 0.7, autoLab = "y")
res.MCA<-MCA(data,quanti.sup=c(1,2,3,6,23),quali.sup=c(7,8,9,11,12,13,14,16,17,18,19,20,21,27),graph=FALSE)
plot.MCA(res.MCA,invisible= c('ind','quali.sup'),label =c('var'),
col.var = "darkcyan", cex = 0.5, cex.main = 0.75, cex.axis = 0.75,
xlim = c(-2, 1.5), ylim = c(-1.5, 1.5), cex.lab = 0.7, autoLab = "y")
res.MCA<-MCA(data,quanti.sup=c(1,2,3,6,23),quali.sup=c(7,8,9,11,12,13,14,16,17,18,19,20,21,27),graph=FALSE)
plot.MCA(res.MCA,invisible= c('ind','quali.sup'),label =c('var'),
col.var = "darkcyan", cex = 0.3, cex.main = 0.75, cex.axis = 0.75,
xlim = c(-2, 1.5), ylim = c(-1.5, 1.5), cex.lab = 0.7, autoLab = "y")
res.MCA<-MCA(data,quanti.sup=c(1,2,3,6,23),quali.sup=c(7,8,9,11,12,13,14,16,17,18,19,20,21,27),graph=FALSE)
plot.MCA(res.MCA,invisible= c('ind','quali.sup'),label =c('var'),
col.var = "darkcyan", cex = 0.4, cex.main = 0.75, cex.axis = 0.75,
xlim = c(-2, 1.5), ylim = c(-1.5, 1.5), cex.lab = 0.7, autoLab = "y")
res.MCA<-MCA(data,quanti.sup=c(1,2,3,6,23),quali.sup=c(7,8,9,11,12,13,14,16,17,18,19,20,21,27),graph=FALSE)
plot.MCA(res.MCA,invisible= c('ind','quali.sup'),label =c('var'),
col.var = "darkcyan", cex = 0.8, cex.main = 0.75, cex.axis = 0.75,
xlim = c(-2, 1.5), ylim = c(-1.5, 1.5), cex.lab = 0.7, autoLab = "y")
data <- read.table("C:/Users/33662/Desktop/add_velo/data/data_paris.csv", sep=",", header = TRUE)
data <- data %>% select(-Consequence.y)
convertir_arrondissement <- function(numero) {
if (numero >= 1 && numero <= 20) {
chiffres <- c("premier", "deuxième", "troisième", "quatrième", "cinquième",
"sixième", "septième", "huitième", "neuvième", "dixième",
"onzième", "douzième", "treizième", "quatorzième", "quinzième",
"seizième", "dix-septième", "dix-huitième", "dix-neuvième", "vingtième")
return(paste0(chiffres[numero], " arr"))
} else {
return("Arrondissement hors plage (1-20)")
}
}
# Supposons que votre dataframe s'appelle "data" :
data$Arrondissement <- sapply(data$Arrondissement, convertir_arrondissement)
baseAFC = as.data.frame(cbind(data$Arrondissement,data$Consequence))
# tableau de contingence
contingence = table(baseAFC)
contingence
# profils lignes et colonnes
ligne = prop.table(contingence, margin = 1)
colonne = prop.table(contingence, margin = 2)
# masses pour les lignes et les colonnes
nb_ind = sum(contingence)
masse_ligne = rowSums(contingence)/nb_ind
masse_col = colSums(contingence)/nb_ind
# Effectuer le test du Chi carré
chisq.test(contingence)
data <- read.table("C:/Users/33662/Desktop/add_velo/data/data_paris.csv", sep=",", header = TRUE)
data <- data %>% select(-Consequence.y)
baseAFC = as.data.frame(cbind(data$Arrondissement,data$Consequence))
# tableau de contingence
contingence = table(baseAFC)
# profils lignes et colonnes
ligne = prop.table(contingence, margin = 1)
colonne = prop.table(contingence, margin = 2)
# masses pour les lignes et les colonnes
nb_ind = sum(contingence)
masse_ligne = rowSums(contingence)/nb_ind
masse_col = colSums(contingence)/nb_ind
# Affichage graphe AFC
resultats_afc <- CA(contingence)
# Visualiser les contributions des variables aux axes
fviz_contrib(resultats_afc, choice = "row")
############## AFC3
baseAFC = as.data.frame(cbind(data$Contexte,data$Consequence))
# tableau de contingence
contingence = table(baseAFC)
contingence
# profils lignes et colonnes
ligne = prop.table(contingence, margin = 1)
colonne = prop.table(contingence, margin = 2)
# masses pour les lignes et les colonnes
nb_ind = sum(contingence)
masse_ligne = rowSums(contingence)/nb_ind
masse_col = colSums(contingence)/nb_ind
# Effectuer le test du Chi carré
chisq.test(contingence)
# Affichage graphe AFC
resultats_afc <- CA(contingence)
######################### PISTE CYCLABLE VELO PARIS ########################################
data <- read.table("C:/Users/33662/Desktop/add_velo/data/data_cycle-piste.csv", sep=",", header = TRUE)
############################## AFC ###############################
baseAFC = as.data.frame(cbind(data$Arrondissement,data$Typologie))
# tableau de contingence
contingence = table(baseAFC)
# profils lignes et colonnes
ligne = prop.table(contingence, margin = 1)
colonne = prop.table(contingence, margin = 2)
# masses pour les lignes et les colonnes
nb_ind = sum(contingence)
masse_ligne = rowSums(contingence)/nb_ind
masse_col = colSums(contingence)/nb_ind
# Effectuer le test du Chi carré
chisq.test(contingence)
# Affichage graphe AFC
resultats_afc <- CA(contingence)
ggplot(data, aes(x = Region, fill = Consequence)) +
geom_bar(stat = "count", color = "black") +
coord_flip() +  # Cela inverse les axes, rendant le graphique horizontal
xlab("Régions") +
ylab("Nb accidents") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Conséquence"))
ggplot(data, aes(x = Region, fill = Consequence)) +
geom_bar(stat = "count", color = "black") +
coord_flip() +  # Cela inverse les axes, rendant le graphique horizontal
xlab("Régions") +
ylab("Nb accidents") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Conséquence"))
################## Analyses univariées #################################
data <- read.csv("C:/Users/33662/Desktop/add_velo/data/data_clean.csv", sep=",", header = TRUE)
data <- data %>%
mutate(dep = as.numeric(dep))
data <- data %>%
mutate(long = as.numeric(long))
plot1 <- ggplot(data, aes(x = an, fill = Consequence)) +
geom_histogram(breaks = seq(min(data$an), max(data$an)),
width = 2, color = "black", alpha = 0.7) +
geom_density(alpha = 0.2) +
labs(title = "Accidents par an") +
ylab("Nb accidents") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none")
# Créer un facteur ordonné avec les niveaux des mois
data$mois <- factor(data$mois, levels = c("janvier", "fevrier", "mars", "avril", "mai", "juin", "juillet", "aout", "septembre", "octobre", "novembre", "decembre"))
plot2 <- ggplot(data, aes(x = mois, fill = Consequence)) +
geom_bar(color = "black") +
labs(title = "Accidents par mois") +
ylab("Nb accidents") +
theme_minimal() +
scale_x_discrete(breaks = c("janvier", "avril", "aout", "decembre")) +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none")
# Créer un facteur ordonné avec les niveaux des jours
data$jour <- factor(data$jour, levels = c("lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi", "dimanche"))
plot3 <- ggplot(data, aes(x = jour, fill = Consequence)) +
geom_bar(color = "black") +
labs(title = "Accidents par jour") +
ylab("Nb accidents") +
theme_minimal() +
scale_x_discrete(breaks = c("lundi", "mercredi", "vendredi", "dimanche")) +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "none")
# Créer un facteur ordonné avec les niveaux les heures
data$Tranche_horaire <- factor(data$Tranche_horaire, levels = c("Matin", "Apres-midi", "Soir", "Nuit", "NA"))
filtered_data <- data[!is.na(data$Tranche_horaire), ]
# Créer le graphique avec les données filtrées
plot4 <- ggplot(filtered_data, aes(x = Tranche_horaire, fill = Consequence)) +
geom_bar(color = "black") +
ylab("Nb accidents") +
labs(title = "Accidents par tranche horaire") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Conséquence"))
arranged_plots <- arrangeGrob(plot1 + theme(legend.position = "none"),
plot2 + theme(legend.position = "none"),
plot3 + theme(legend.position = "none"),
plot4 + theme(legend.position = "none"),
ncol = 2)
# Ajouter une légende en bas
legend <- cowplot::get_legend(plot4)
# Afficher le graphique final avec la légende en bas
gridExtra::grid.arrange(arranged_plots, legend, ncol = 1,
heights = c(15, 1))
ggplot(data, aes(x = Region, fill = Consequence)) +
geom_bar(stat = "count", color = "black") +
coord_flip() +  # Cela inverse les axes, rendant le graphique horizontal
xlab("Régions") +
ylab("Nb accidents") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Conséquence"))
ggplot(data, aes(x = Region, fill = Consequence)) +
geom_bar(stat = "count", color = "black") +
coord_flip() +  # Cela inverse les axes, rendant le graphique horizontal
xlab("Régions") +
ylab("Nb accidents") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "bottom", legend.key.size = unit(2, "cm")) +
guides(fill = guide_legend(title = "Conséquence"))
ggplot(data, aes(x = Region, fill = Consequence)) +
geom_bar(stat = "count", color = "black") +
coord_flip() +  # Cela inverse les axes, rendant le graphique horizontal
xlab("Régions") +
ylab("Nb accidents") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "bottom", legend.key.size = unit(0.5, "cm")) +
guides(fill = guide_legend(title = "Conséquence"))
ggplot(data, aes(x = Region, fill = Consequence)) +
geom_bar(stat = "count", color = "black") +
coord_flip() +  # Cela inverse les axes, rendant le graphique horizontal
xlab("Régions") +
ylab("Nb accidents") +
theme_minimal() +
scale_fill_manual(values = c("orange", "skyblue", "green", "red")) +
theme(legend.position = "bottom", legend.key.size = unit(0.4, "cm")) +
guides(fill = guide_legend(title = "Conséquence"))
# Change les valeurs dans la colonne "Typologie"
df <- df %>%
mutate(Typologie = ifelse(Typologie == "Autres itineraires cyclables (ex : Aires pietonnes - Contre-sens cyclables)", "Aires pietonnes", Typologie))
# Affiche le data frame après le changement
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
facet_wrap(~Typologie, scales = "free_y") +
theme_minimal()+
ylab("Nb aménagement")+
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Arrondissements")) +
# Ajustez la taille de la légende en modifiant les paramètres du thème
theme(legend.key.size = unit(0.3, "cm"), # Ajuste la taille de la clé de la légende
legend.title = element_text(size = 6), # Ajuste la taille du titre de la légende
legend.text = element_text(size = 5)) # Ajuste la taille du texte de la légende
# Change les valeurs dans la colonne "Typologie"
df <- df %>%
mutate(Typologie = ifelse(Typologie == "Autres itineraires cyclables (ex : Aires pietonnes - Contre-sens cyclables)", "Aires pietonnes", Typologie))
# Affiche le data frame après le changement
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
facet_wrap(~Typologie, scales = "free_y") +
theme_minimal()+
ylab("Nb aménagement")+
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Arrondissements")) +
# Ajustez la taille de la légende en modifiant les paramètres du thème
theme(legend.key.size = unit(0.6, "cm"), # Ajuste la taille de la clé de la légende
legend.title = element_text(size = 6), # Ajuste la taille du titre de la légende
legend.text = element_text(size = 5)) # Ajuste la taille du texte de la légende
# Change les valeurs dans la colonne "Typologie"
df <- df %>%
mutate(Typologie = ifelse(Typologie == "Autres itineraires cyclables (ex : Aires pietonnes - Contre-sens cyclables)", "Aires pietonnes", Typologie))
# Affiche le data frame après le changement
# Relation entre l'arrondissement et les typo des pistes
ggplot(df, aes(x = an, fill = factor(Arrondissement))) +
geom_bar(position = "stack", color = "black") +
facet_wrap(~Typologie, scales = "free_y") +
theme_minimal()+
ylab("Nb aménagement")+
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Arrondissements")) +
# Ajustez la taille de la légende en modifiant les paramètres du thème
theme(legend.key.size = unit(0.6, "cm"), # Ajuste la taille de la clé de la légende
legend.title = element_text(size = 10), # Ajuste la taille du titre de la légende
legend.text = element_text(size = 7)) # Ajuste la taille du texte de la légende
